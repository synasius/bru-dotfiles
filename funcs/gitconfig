# vim: set filetype=zsh:

gitconfig() {
    info 'setup gitconfig'
    # if there is no user.email, we'll assume it's a new machine/setup and ask it
    if [ -z "$(git config --global --get user.email)" ]; then
        user ' - What is your github author name?'
        read -r user_name
        user ' - What is your github author email?'
        read -r user_email
        user ' - What is your signing key?'
        read -r user_key

        git config --global user.name "$user_name"
        git config --global user.email "$user_email"
    fi

    if [ "$(git config --global --get dotfiles.managed)" != "true" ]; then
        # if user.email exists, let's check for dotfiles.managed config. If it is
        # not true, we'll backup the gitconfig file and set previous user.email and
        # user.name in the new one
        user_name="$(git config --global --get user.name)"
        user_email="$(git config --global --get user.email)"
        mv ${HOME}/.gitconfig ${HOME}/.gitconfig.backup
        success "moved ~/.gitconfig to ~/.gitconfig.backup"
        git config --global user.name "$user_name"
        git config --global user.email "$user_email"
        git config --global user.signingkey "$user_key"
        # include the gitconfig.local file
        git config --global include.path ${HOME}/.gitconfig.local
        # finally make git knows this is a managed config already,
        # preventing later overrides by this script
        git config --global dotfiles.managed true
    else
        # otherwise this gitconfig was already made by the dotfiles
        info "already managed by dotfiles"
    fi
    success 'gitconfig'
}

