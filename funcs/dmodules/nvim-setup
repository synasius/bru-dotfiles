# vim: set filetype=zsh:

modulename=${0}

_nvim_config() {
    if [[ -f $HOME/.config/nvim/init.vim ]]; then
        info "skipping - nvim config already installed"
        return
    fi

    mkdir -p $HOME/.config/nvim

    # link the nvim directory to the .config nvim directory
    info "install vim-plug"
    ln -s "$DOTFILES"/modules/nvim/init.vim $HOME/.config/nvim/init.vim
    ln -s "$DOTFILES"/modules/nvim/ftdetect $HOME/.config/nvim/ftdetect
    ln -s "$DOTFILES"/modules/nvim/after $HOME/.config/nvim/after

    # Install vim-plug for neovim
    info "install vim-plug"
    curl -fLo $HOME/.local/share/nvim/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
}

_nvim_venv() {
    local neovim_venv=${HOME}/.vim/neovim
    if [[ -d ${neovim_venv} ]]; then
        info "skipping - nvim venv already configured"
        return
    fi

    info "creating virtualenv for pynvim in ${neovim_venv}"
    python3 -m venv ${neovim_venv}

    source ${neovim_venv}/bin/activate
    pip install --upgrade pynvim
    deactivate
}

_nvim_package() {
    if (( $+commands[nvim] )); then
        info "skipping - nvim command already available"
        return
    fi

    info "add neovim unstable ppa"
    sudo add-apt-repository -y ppa:neovim-ppa/unstable
    sudo apt-get -q=2 update

    # install neovim from
    info "install neovim from unstable"
    sudo apt-get -q=2 install -y neovim
}

nvim-setup() {
    _nvim_package
    _nvim_config
    _nvim_venv

    # Install everything
    info "Running 'vim +PlugInstall' after the setup finished"

    # Deactivate pipefail because nvm* functions behave in a bad
    # way when pipefail is active. -_-
    set +o pipefail
    \. "${NVM_DIR}/nvm.sh" --no-use
    nvm use default
    # Once done we reactivate it
    set -o pipefail
    /usr/bin/nvim +PlugIntall +qa
}

nvim-setup "$@"
